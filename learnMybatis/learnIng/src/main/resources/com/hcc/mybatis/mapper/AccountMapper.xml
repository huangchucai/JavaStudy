<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.hcc.mybatis.mapper.AccountMapper">

  <resultMap id="accountResultMap" type="account">
    <id property="id" column="id"/>
    <result property="name" column="name"/>
    <result property="money" column="money"/>
    <result property="age" column="use_age"/>
  </resultMap>

  <select id="selectAccount" resultType="Account">
    select id, name, money, use_age as useAge from student where id = #{id}
  </select>

  <select id="selectAccountList" resultMap="accountResultMap">
    select * from student where money > #{money}
  </select>

  <select id="selectAccountListByAll" resultMap="accountResultMap">
    select * from student order by ${orderBy} desc
  </select>

  <select id="selectAccountByName" resultMap="accountResultMap">
    select * from student where name = #{name}
  </select>

  <select id="countAll" resultType="Integer">
    select count(*) from student
  </select>

  <!--  <select id="selectActiveAccountByGender" resultMap="accountResultMap" >-->
  <!--    select * from student where status = 1 and gender = #{gender}-->
  <!--  </select>-->

  <!--  <select id="selectActiveAccountByAge" resultMap="accountResultMap" >-->
  <!--    select * from student where status = 1 and use_age = #{age}-->
  <!--  </select>-->

  <!--  <select id="selectActiveAccountByAgeAndGender" resultMap="accountResultMap" >-->
  <!--    select * from student where status = 1 and use_age = #{age} and gender = #{gender}-->
  <!--  </select>-->

  <select id="selectActiveAccountByAll" resultMap="accountResultMap" parameterType="account">
    select * from student
<!--    <where>-->
    <trim prefix="where" prefixOverrides="and | or" >
      <if test="account.status != null">
        and status = #{account.status}
      </if>
      <if test="account.age != null">
        and use_age = #{account.age}
      </if>
      <if test="account.gender != null">
        and gender = #{account.gender}
      </if>
    </trim>


<!--    </where>-->
  </select>

  <select id="selectAccountByIds" resultMap="accountResultMap" parameterType="list">
    select * from student
    <where>
      <choose>
        <when test="ids != null and ids.size > 0">
          <foreach collection="ids" item="item" separator="," open="id in (" close=")">
            #{item}
          </foreach>
        </when>
        <otherwise>
          0 = 1
        </otherwise>
      </choose>

    </where>

  </select>

  <sql id="selectActiveAccountDefaultMoney">
    <where>
      status = 1
      <choose>
        <when test="account.age != null">
          and use_age = #{account.age}
        </when>
        <when test="account.gender != null">
          and gender = #{account.gender}
        </when>
        <otherwise>
          and money > 1000
        </otherwise>
      </choose>
    </where>
  </sql>
  <select id="selectActiveAccountDefaultMoney" resultMap="accountResultMap">
    select * from student
    <include refid="selectActiveAccountDefaultMoney" />
    order by id asc
    limit #{offset}, #{limit}
  </select>

  <select id="countActiveAccountDefaultMoney" resultType="Integer" parameterType="account">
    select count(*) from student
    <include refid="selectActiveAccountDefaultMoney" />
  </select>

  <insert id="insertAccount">
    insert into student (name, money) values (#{account.name}, #{account.money})
  </insert>

  <!-- 可选的插入参数  -->
  <insert id="insertSelective" parameterType="account">
    insert into student
    <trim prefix="(" suffixOverrides="," suffix=")">
      <if test="account.name != null">name,</if>
      <if test="account.money != null">money,</if>
      <if test="account.age != null">use_age,</if>
      <if test="account.gender != null">gender,</if>
      <if test="account.status != null">status,</if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="account.name != null">#{account.name},</if>
      <if test="account.money != null">#{account.money},</if>
      <if test="account.age != null">#{account.age},</if>
      <if test="account.gender != null">#{account.gender},</if>
      <if test="account.status != null">#{account.status},</if>
    </trim>
  </insert>

  <insert id="insertAccountByMap">
    insert into student (name, money) values (#{map.name}, #{map.money})
  </insert>

  <insert id="insertAccountByParams">
    insert into student (name, money) values (#{name}, #{money})
  </insert>

  <update id="updateAccount">
    update student set money = #{account.money} where id = #{account.id}
  </update>

  <delete id="deleteAccount">
    delete from student where id = #{id}
  </delete>
</mapper>
